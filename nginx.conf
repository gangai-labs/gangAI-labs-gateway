user  nginx;
worker_processes  auto;
worker_rlimit_nofile 65535;
error_log  /dev/null crit;
pid        /var/run/nginx.pid;

events {
    use epoll;
    worker_connections 65535;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    access_log off;
    error_log /dev/null crit;

    # gzip for transfer efficiency (optional)
    gzip on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # upstream backends (keepalive to reuse connections)
    upstream backend {
        # Changed: Use least_conn for even distribution from single IP (e.g., local testing).
        # Revert to 'ip_hash;' for production multi-IP sticky sessions.
        least_conn;
        server gateway1:8000 max_fails=3 fail_timeout=30s;
        server gateway2:8000 max_fails=3 fail_timeout=30s;
        server gateway3:8000 max_fails=3 fail_timeout=30s;
        server gateway4:8000 max_fails=3 fail_timeout=30s;
        server gateway5:8000 max_fails=3 fail_timeout=30s;
        server gateway6:8000 max_fails=3 fail_timeout=30s;
        server gateway7:8000 max_fails=3 fail_timeout=30s;
        server gateway8:8000 max_fails=3 fail_timeout=30s;
        server gateway9:8000 max_fails=3 fail_timeout=30s;
        server gateway10:8000 max_fails=3 fail_timeout=30s;
 
        keepalive 256;
    }

    # WebSocket connection header mapping
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Recommended proxy defaults
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    # buffer / timeout tuning
    proxy_buffers 16 16k;
    proxy_buffer_size 32k;
    proxy_busy_buffers_size 64k;
    proxy_connect_timeout 3s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    proxy_next_upstream_tries 2;
    proxy_next_upstream_timeout 5s;

    # optional rate limiting per IP (tunable). remove if not desired.
    # Disabled for local load testing from single IP
    # limit_conn_zone $binary_remote_addr zone=addr:10m;
    # limit_req_zone $binary_remote_addr zone=req:10m rate=200r/s;

    server {
        listen 80 reuseport;
        server_name localhost;
        server_tokens off;

        # connection limits per ip (helps protect backend under flood)
        # Disabled for local load testing from single IP
        # limit_conn addr 100;
        # limit_req zone=req burst=50 nodelay;

        # client limits
        client_max_body_size 10m;
        client_body_timeout 10s;
        client_header_timeout 60s;
        send_timeout 60s;
        keepalive_requests 1000;

        # location proxying
        location / {
        
            proxy_pass http://backend;
            proxy_connect_timeout 20s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # WebSocket headers (reinforce)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_buffering off;
	    proxy_cache off;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # static assets example (serve directly if used)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 7d;
            add_header Cache-Control "public, must-revalidate";
            try_files $uri =404;
        }
    }

    # include additional confs if present
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
